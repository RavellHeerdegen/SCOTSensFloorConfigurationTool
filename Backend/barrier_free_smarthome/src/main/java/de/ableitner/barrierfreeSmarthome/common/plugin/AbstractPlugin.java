package de.ableitner.barrierfreeSmarthome.common.plugin;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Locale;

import de.ableitner.barrierfreeSmarthome.common.BarrierfreeSmarthomeException;

/**
 * This class can be extended by other classes, which will be the entry point of
 * a plugin. It provides default functions / properties, which are often needed
 * by the plugins.
 * 
 * @author Tobias Ableitner
 *
 */
public abstract class AbstractPlugin implements IPluginV1 {

	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// attributes
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************

	private Locale locale;

	private List<IPluginObserver> observers;

	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// constructors
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************

	public AbstractPlugin() {

		this.setLocale(null);
		this.setObservers(Collections.synchronizedList(new ArrayList<IPluginObserver>()));
	}




	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// getters and setters
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************

	private List<IPluginObserver> getObservers() {
		return this.observers;
	}

	private void setObservers(List<IPluginObserver> observers) {
		this.observers = observers;
	}




	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// abstract methods
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************




	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// override methods
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************

	@Override
	public Locale getLocale() {
		return this.locale;
	}

	@Override
	public void setLocale(Locale locale) {
		this.locale = locale;
	}

	@Override
	public boolean addObserver(IPluginObserver pluginObserver) {
		boolean newlyAdded = false;
		if (pluginObserver != null) {
			if (!this.getObservers().contains(pluginObserver)) {
				this.getObservers().add(pluginObserver);
				newlyAdded = true;
			}
		}
		return newlyAdded;
	}

	@Override
	public boolean removeObserver(IPluginObserver pluginObserver) {
		boolean removed = false;
		if (pluginObserver != null) {
			removed = this.getObservers().remove(pluginObserver);
		}
		return removed;
	}




	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// public methods
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************




	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// protected methods
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************

	protected void handleOnSuccess(String successMessage) {
		for(IPluginObserver observer : this.getObservers()) {
			observer.onSuccess(successMessage);
		}
	}
	
	protected void handleOnInfo(String infoMessage) {
		for(IPluginObserver observer : this.getObservers()) {
			observer.onSuccess(infoMessage);
		}
	}
	
	protected void handleOnError(Exception exception, String errorMessage, String userErrorMessage) {
		for(IPluginObserver observer : this.getObservers()) {
			observer.onError(exception, errorMessage, userErrorMessage);
		}
	}
	
	protected void handleOnError(BarrierfreeSmarthomeException exception) {
		for(IPluginObserver observer : this.getObservers()) {
			observer.onError(exception);
		}
	}


	

	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// private methods
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************




	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// inner classes
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************

}
